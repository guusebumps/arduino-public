Mitov : Namespace
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_BasicGenerator.h' )]
  [ArduinoClass( 'Mitov::TArduinoGeneratorWhenDisabled' )]
  *TArduinoGeneratorWhenDisabled : TArduinoCodePersistent

    Reset : Boolean = False

    [ArduinoVariableIfNotDefault( Boolean, 'FCycleCompleted', True )]
    CompleteCycle : Boolean = False
    
  ;
//---------------------------------------------------------------------------
  TArduinoBasicClockGenerator_Simple_Extender : Extender

    [ArduinoPinConnectedAddCodeEntry( ceStart, 'SystemStartInit' )]
    [ArduinoPinDisconnectedAddCodeEntry( ceStart, 'SystemStartGenerate' )]
    ClockInputPin
    
  ;
//---------------------------------------------------------------------------
  TArduinoBasicClockGenerator_Extender : TArduinoBasicClockGenerator_Simple_Extender

    [ArduinoPinDisconnectedAddCodeEntry( ceLoopBegin )]
    ClockInputPin
    
  ;
//---------------------------------------------------------------------------
  [ArduinoPopulatedCallChainParameter( 'float', 'AOldPhase' )]
  [ArduinoPopulatedCallChainParameter( 'float', 'ANewPhase' )]
  [Name( 'PhaseChange' )]
  ArduinoGeneratorPhaseChangeCallChainAttribute : ArduinoCallChainCompleteAttribute;
//---------------------------------------------------------------------------
  [ArduinoGeneratorPhaseChangeCallChain]
  [ParentImage( TArduinoBasicValueElements )]
  TArduinoPhaseGeneratorElements : TArduinoPersistentCollection;
//---------------------------------------------------------------------------
  [ArduinoHelpPostfix( '(Generator Phase)' )]
  [Collection( TArduinoPhaseGeneratorElements )]
  [Name( 'Reached Phase' )]
  [ArduinoClass( 'Mitov::TArduinoReachedPhaseGeneratorElement' )]
  [ArduinoDeclaredClass]
  [ArduinoGeneratorPhaseChangeCallChain]
  +TArduinoReachedPhaseGeneratorElement : TArduinoBasicNamedExludePersistent

    OutputPin : TOWArduinoClockSourcePin
    
    [ValueRange( 0.0, 1.0 )]
    Phase : Single = 0.0
    
    Enabled : Boolean = True
    
  ;
//---------------------------------------------------------------------------
  TArduinoBasicGenerator_Simple_Extender : Extender

    [ArduinoUseBindingCheckSetter( 'UpdateEnabled' )]
    Enabled

    ResetInputPin : TOWArduinoClockSinkPin

    [DesignRange( 0.0001, 1000 )]
    [MinValue( 0.0 )]
    [NamePostfix( ' (Hz)' )]
    Frequency : Single = 1.0

    [ValueRange( 0.0, 1.0 )]
    Phase : Single = 0.0

    WhenDisabled : TArduinoGeneratorWhenDisabled

  ;
//---------------------------------------------------------------------------
  [ArduinoLoopBegin( 'SystemLoopBeginPhase( AElapsedMicros )' )]
  [ArduinoElapsedMicros]
  TArduinoBasicGenerator_Extender : TArduinoBasicGenerator_Simple_Extender, TArduinoBasicClockGenerator_Extender

    [ComponentEditorEntryDesign( 'Edit E&lements ...', True )]
    Elements : TArduinoPhaseGeneratorElements
    
  ;
//---------------------------------------------------------------------------
  TArduinoBasicFrequencyAnalogGenerator : TArduinoCommonClockedAnalogEnabledSource, TArduinoBasicGenerator_Extender

    [DesignRange( -10000, 10000 )]
    Amplitude : Single = 0.5

    [DesignRange( -10000, 10000 )]
    Offset : Single = 0.5

  ;
//---------------------------------------------------------------------------
  TArduinoGeneratorComplex : TArduinoComplex
  
    [DesignRange( -10000, 10000 )]
    Real = 0.5
    
    [DesignRange( -10000, 10000 )]
    Imaginary = 0.5
    
  ;
//---------------------------------------------------------------------------
  TArduinoCommonClockedComplexEnableSource : TArduinoCommonClockedComplexSource

    Enabled : Boolean = True

  ;
//---------------------------------------------------------------------------
  TArduinoBasicFrequencyComplexGenerator : TArduinoCommonClockedComplexEnableSource, TArduinoBasicGenerator_Extender

    Amplitude : TArduinoGeneratorComplex
    Offset : TArduinoGeneratorComplex

  ;
//---------------------------------------------------------------------------
  TArduinoAsymmetricGenerator_Extender : Extender

    [ValueRange( -1.0, 1.0 )]
    Asymmetry : Single = 0.0

  ;
//---------------------------------------------------------------------------
  TArduinoAsymmetricAnalogGenerator : TArduinoBasicFrequencyAnalogGenerator, TArduinoAsymmetricGenerator_Extender;
//---------------------------------------------------------------------------
  TArduinoAsymmetricComplexGenerator : TArduinoBasicFrequencyComplexGenerator, TArduinoAsymmetricGenerator_Extender;
//---------------------------------------------------------------------------
  TArduinoBasicFrequencyIntegerGenerator : TArduinoCommonClockedIntegerEnableSource, TArduinoBasicGenerator_Extender

    [DesignRange( -10000, 10000 )]
    Amplitude : Integer = 1000

    [DesignRange( -10000, 10000 )]
    Offset : Integer = 0

  ;
//---------------------------------------------------------------------------
  TArduinoAsymmetricIntegerGenerator : TArduinoBasicFrequencyIntegerGenerator, TArduinoAsymmetricGenerator_Extender;
//---------------------------------------------------------------------------
  TArduinoCommonClockedUnsignedEnableSource : TArduinoCommonClockedUnsignedSource

    Enabled : Boolean = True

  ;
//---------------------------------------------------------------------------
  TArduinoBasicFrequencyUnsignedGenerator : TArduinoCommonClockedUnsignedEnableSource, TArduinoBasicGenerator_Extender

    [DesignRange( 0, 10000 )]
    Amplitude : Unsigned = 1000

    [DesignRange( 0, 10000 )]
    Offset : Unsigned = 1000

  ;
//---------------------------------------------------------------------------
  TArduinoAsymmetricUnsignedGenerator : TArduinoBasicFrequencyUnsignedGenerator, TArduinoAsymmetricGenerator_Extender;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_TriangleGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'float' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TriangleAnalogGenerator' )]
  [CreateName( 'TriangleAnalogGenerator' )]
  [Name( 'Triangle Analog Generator' )]
  [Category( TArduinoAnalogGeneratorsToolbarCategory )]
  +TArduinoTriangleAnalogGenerator : TArduinoAsymmetricAnalogGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_TriangleGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'Mitov::TComplex' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TriangleComplexGenerator' )]
  [CreateName( 'TriangleComplexGenerator' )]
  [Name( 'Triangle Complex Generator' )]
  [Category( TArduinoComplexGeneratorsToolbarCategory )]
  +TArduinoTriangleComplexGenerator : TArduinoAsymmetricComplexGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_TriangleGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'int32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TriangleIntegerGenerator' )]
  [CreateName( 'TriangleIntegerGenerator' )]
  [Name( 'Triangle Integer Generator' )]
  [Category( TArduinoIntegerGeneratorsToolbarCategory )]
  +TArduinoTriangleIntegerGenerator : TArduinoAsymmetricIntegerGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_TriangleGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'uint32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TriangleIntegerGenerator' )]
  [CreateName( 'TriangleUnsignedGenerator' )]
  [Name( 'Triangle Unsigned Generator' )]
  [Category( TArduinoUnsignedGeneratorsToolbarCategory )]
  +TArduinoTriangleUnsignedGenerator : TArduinoAsymmetricUnsignedGenerator;
//---------------------------------------------------------------------------
  TArduinoRandomGenerator_Extender : TArduinoBasicClockGenerator_Extender

    Seed : Integer = 0
    
  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_GaussGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonGaussGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'float' )]
  [CreateName( 'GaussAnalogGenerator' )]
  [Name( 'Gauss Analog Generator' )]
  [Category( TArduinoAnalogGeneratorsToolbarCategory )]
  [ArduinoVariable( Unsigned, 1, 'FIndex' )]
  +TArduinoGaussAnalogGenerator : TArduinoCommonClockedAnalogEnabledSource, TArduinoRandomGenerator_Extender

    [DesignRange( -10000, 10000 )]
    Mean : Single = 0.0

    [DesignRange( -10000, 10000 )]
    StandardDeviation : Single = 1.0

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_GaussGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonGaussGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'int32_t' )]
  [CreateName( 'GaussIntegerGenerator' )]
  [Name( 'Gauss Integer Generator' )]
  [Category( TArduinoIntegerGeneratorsToolbarCategory )]
  [ArduinoVariable( Unsigned, 1, 'FIndex' )]
  +TArduinoGaussIntegerGenerator : TArduinoCommonClockedIntegerEnableSource, TArduinoRandomGenerator_Extender

    Mean : Integer = 0
    StandardDeviation : Integer = 1000

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_GaussGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonGaussGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'uint32_t' )]
  [CreateName( 'GaussUnsignedGenerator' )]
  [Name( 'Gauss Unsigned Generator' )]
  [Category( TArduinoUnsignedGeneratorsToolbarCategory )]
  [ArduinoVariable( Unsigned, 1, 'FIndex' )]
  +TArduinoGaussUnsignedGenerator : TArduinoCommonClockedUnsignedEnableSource, TArduinoRandomGenerator_Extender

    Mean : Unsigned = 10000
    StandardDeviation : Unsigned = 1000

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_RandomGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonRandomGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'float' )]
  [ArduinoTemplateParameter( '1_BASE', 'Mitov::RandomAnalogGenerator' )]
  [CreateName( 'RandomAnalogGenerator' )]
  [Name( 'Random Analog Generator' )]
  [Category( TArduinoAnalogGeneratorsToolbarCategory )]
  +TArduinoRandomAnalogGenerator : TArduinoCommonClockedAnalogEnabledSource, TArduinoRandomGenerator_Extender

    [DesignRange( -10000, 10000 )]
    Min : Single = 0.0

    [DesignRange( -10000, 10000 )]
    Max : Single = 1.0

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_RandomGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonRandomGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'float' )]
  [ArduinoTemplateParameter( '1_BASE', 'Mitov::RandomIntegerGenerator<int32_t>' )]
  [CreateName( 'RandomIntegerGenerator' )]
  [Name( 'Random Integer Generator' )]
  [Category( TArduinoIntegerGeneratorsToolbarCategory )]
  +TArduinoRandomIntegerGenerator : TArduinoCommonClockedIntegerEnableSource, TArduinoRandomGenerator_Extender

    Min : Integer = -1000
    Max : Integer = 1000

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_RandomGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonRandomGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'float' )]
  [ArduinoTemplateParameter( '1_BASE', 'Mitov::RandomIntegerGenerator<int32_t>' )]
  [CreateName( 'RandomUnsignedGenerator' )]
  [Name( 'Random Unsigned Generator' )]
  [Category( TArduinoUnsignedGeneratorsToolbarCategory )]
  +TArduinoRandomUnsignedGenerator : TArduinoCommonClockedUnsignedEnableSource, TArduinoRandomGenerator_Extender

    Min : Unsigned = 0
    Max : Unsigned = 1000

  ;
//---------------------------------------------------------------------------
  TArduinoMaxComplex : TArduinoComplex

    Real = 1.0
    Imaginary = 1.0

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_RandomGenerator.h' )]
  [ArduinoClass( 'Mitov::CommonRandomGenerator' )]
  [ArduinoTemplateParameter( '0_TYPE', 'Mitov::TComplex' )]
  [ArduinoTemplateParameter( '1_BASE', 'Mitov::RandomComplexImplementation' )]
  [Category( TArduinoComplexGeneratorsToolbarCategory )]
  [CreateName( 'RandomComplex' )]
  [Name( 'Random Complex' )]
  +TArduinoRandomComplexGenerator : TArduinoCommonClockedComplexEnabledSource, TArduinoRandomGenerator_Extender

    Min : TArduinoComplex
    Max : TArduinoMaxComplex

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_RandomGenerator.h' )]
  [ArduinoClass( 'Mitov::RandomDigitalGenerator' )]
  [CreateName( 'RandomDigitalGenerator' )]
  [Name( 'Random Digital Generator' )]
  [ArduinoVariable( Boolean, 'FValue' )]
  [Category( TArduinoDigitalGeneratorsToolbarCategory )]
  +TArduinoRandomDigitalGenerator : TArduinoCommonClockedBooleanEnableSource, TArduinoRandomGenerator_Extender;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SineGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'float' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::SineAnalogGenerator' )]
  [ArduinoTemplateParameter( 'Asymmetry', 'Mitov::EmptyProperty<22>' )]
  [CreateName( 'SineAnalogGenerator' )]
  [Name( 'Sine Analog Generator' )]
  [Category( TArduinoAnalogGeneratorsToolbarCategory )]
  +TArduinoSineGenerator : TArduinoBasicFrequencyAnalogGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SineGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'Mitov::TComplex' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::SineComplexGenerator' )]
  [ArduinoTemplateParameter( 'Asymmetry', 'Mitov::EmptyProperty<22>' )]
  [CreateName( 'SineComplexGenerator' )]
  [Name( 'Sine Complex Generator' )]
  [Category( TArduinoComplexGeneratorsToolbarCategory )]
  +TArduinoSineComplexGenerator : TArduinoBasicFrequencyComplexGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SineGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'int32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::SineIntegerGenerator' )]
  [ArduinoTemplateParameter( 'Asymmetry', 'Mitov::EmptyProperty<22>' )]
  [CreateName( 'SineIntegerGenerator' )]
  [Name( 'Sine Integer Generator' )]
  [Category( TArduinoIntegerGeneratorsToolbarCategory )]
  +TArduinoSineIntegerGenerator : TArduinoBasicFrequencyIntegerGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SineGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'uint32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::SineIntegerGenerator' )]
  [ArduinoTemplateParameter( 'Asymmetry', 'Mitov::EmptyProperty<22>' )]
  [CreateName( 'SineUnsignedGenerator' )]
  [Name( 'Sine Unsigned Generator' )]
  [Category( TArduinoUnsignedGeneratorsToolbarCategory )]
  +TArduinoSineUnsignedGenerator : TArduinoBasicFrequencyUnsignedGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SquareGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'float' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TypedSquareGenerator' )]
//  [ArduinoContructorParameter( '0.5f, 0.5f' )]
  [CreateName( 'SquareAnalogGenerator' )]
  [Name( 'Square Analog Generator' )]
  [Category( TArduinoAnalogGeneratorsToolbarCategory )]
//  [ArduinoStart]
  +TArduinoSquareGenerator : TArduinoAsymmetricAnalogGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SquareGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'Mitov::TComplex' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TypedSquareGenerator' )]
  [CreateName( 'SquareComplexGenerator' )]
  [Name( 'Square Complex Generator' )]
  [Category( TArduinoComplexGeneratorsToolbarCategory )]
//  [ArduinoStart]
  +TArduinoSquareComplexGenerator : TArduinoAsymmetricComplexGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SquareGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'int32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TypedSquareGenerator' )]
  [CreateName( 'SquareIntegerGenerator' )]
  [Name( 'Square Integer Generator' )]
  [Category( TArduinoIntegerGeneratorsToolbarCategory )]
  +TArduinoSquareIntegerGenerator : TArduinoAsymmetricIntegerGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_SquareGenerator.h' )]
  [ArduinoClass( 'Mitov::TypedFrequencyGenerator' )]
  [ArduinoTemplateParameter( 'TYPE', 'uint32_t' )]
  [ArduinoTemplateParameter( 'BASE', 'Mitov::TypedSquareGenerator' )]
  [CreateName( 'SquareUnsignedGenerator' )]
  [Name( 'Square Unsigned Generator' )]
  [Category( TArduinoUnsignedGeneratorsToolbarCategory )]
  +TArduinoSquareUnsignedGenerator : TArduinoAsymmetricUnsignedGenerator;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_BinaryGenerators.h' )]
  [Category( TArduinoDigitalGeneratorsToolbarCategory )]
  TArduinoBasicBooleanGenerator : TArduinoCommonEnabledBooleanSource

    [OldName( 'StartValue' )]
//    [ArduinoFlexibleVariable]
    InitialValue : Boolean = False

  ;
//---------------------------------------------------------------------------
  [ArduinoInclude( 'Mitov_BinaryGenerators.h' )]
  [ArduinoClass( 'Mitov::PulseGenerator' )]
  [CreateName( 'PulseGenerator' )]
  [Name( 'Pulse Generator' )]
//  [ArduinoInit]
  [ArduinoStart]
  [ArduinoLoopBegin]
  [ArduinoOptionalVariable( Single, 'FPhase', 0.0 )]
  [ArduinoVariable( Boolean, 'FValue' )]
  [ArduinoOprionalPeriodMicros( (( 1 / ( Frequency * 2 ) ) * 1000000 ) + 0.5 )]
  [ArduinoPeriodMicrosPostfix( '_Shared' )]
  +TArduinoPulseGenerator : TArduinoBasicBooleanGenerator
  
    [ArduinoNotPeriodMicrosIfPinConnected]
    ResetInputPin : TOWArduinoClockSinkPin
    
//    [ArduinoNotPeriodMicrosIfPinConnected]
//    ClockInputPin

    [ArduinoUseBindingCheckSetter( 'UpdateEnabled' )]
    [ArduinoNotPeriodMicrosIfNotEquals( True )]
    Enabled

    [DesignRange( 0.0001, 1000 )]
    [MinValue( 0.0 )]
//    [ArduinoUseBindingSetter]
    [NamePostfix( ' (Hz)' )]
    [ArduinoNotPeriodMicrosIfEquals( 0.0 )]
    Frequency : Single = 1.0

    [ValueRange( -1.0, 1.0 )]
    [ArduinoVariableIfNotDefault( 'FPhase' )]
    [ArduinoNotPeriodMicrosIfNotEquals( 0.0 )]
    Asymmetry : Single = 0.0

    [ValueRange( 0.0, 1.0 )]
    [ArduinoVariableIfNotDefault( 'FPhase' )]
    [ArduinoUseBindingCheckSetter( 'UpdatePhase' )]
    [ArduinoNotPeriodMicrosIfNotEquals( 0.0 )]
    Phase : Single = 0.0
    
    WhenDisabled : TArduinoGeneratorWhenDisabled

  ;
//---------------------------------------------------------------------------
; // Mitov